function quadrotor_sim
	ITERATION_TIMES = 10000

	math = se3_math;

	uav_dynamics = dynamics;        %create uav dynamics object
	uav_dynamics.dt = 0.001;        %set iteration period [sec]
	uav_dynamics.mass = 1;          %set uav mass [kg]
	uav_dynamics.a = [0; 0; 0];     %acceleration of uav [m/s^2], effected by applied force
	uav_dynamics.v = [0; 0; 0];     %initial velocity of uav [m/s]
	uav_dynamics.x = [0; 0; 0];     %initial position of uav [m]
	uav_dynamics.W = [0; 0; 0];     %initial angular velocity of uav
	uav_dynamics.W_dot = [0; 0; 0]; %angular acceleration of uav, effected by applied moment
	uav_dynamics.f = [0; 0; 0];     %force generated by controller
	uav_dynamics.M = [0; 0; 0];     %moment generated by controller
	uav_dynamics.R = math.euler_to_dcm(deg2rad(0), deg2rad(0), deg2rad(0)); %initial attitude (DCM)

	uav_dynamics.J = [0.01466 0 0;  %inertia matrix of uav
			  0 0.01466 0;
			  0 0 0.02848];

	%plot datas
	time_arr = zeros(1, ITERATION_TIMES);
	accel_arr = zeros(3, ITERATION_TIMES);
	vel_arr.g = zeros(3, ITERATION_TIMES);
	pos_arr = zeros(3, ITERATION_TIMES);
	W_dot_arr = zeros(3, ITERATION_TIMES);
	W_arr = zeros(3, ITERATION_TIMES);
	M_arr = zeros(3, ITERATION_TIMES);
	prv_angle_arr = zeros(1, ITERATION_TIMES);
	eR_arr = zeros(3, ITERATION_TIMES);
	eW_arr = zeros(3, ITERATION_TIMES);
	ex_arr = zeros(3, ITERATION_TIMES);
	ev_arr = zeros(3, ITERATION_TIMES);

	%controller setpoints
	xd = [0; 0; 0];
	x_dot_dot_d = [0; 0; 0];
	vd = [0; 0; 0];
	yaw_d = deg2rad(0);
	Wd = [0; 0; 0];
	W_dot_d = [0; 0; 0];

	%controller gains
	kx = [0; 0; 0];
	kv = [0; 0; 0];
	kR = [5; 5; 5];
	kW = [1; 1; 1];

	for i = 1: ITERATION_TIMES
		%%%%%%%%%%%%%%%%%%%%%%%%%%
		% Update System Dynamics %
		%%%%%%%%%%%%%%%%%%%%%%%%%%
		uav_dynamics = update(uav_dynamics);

		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		% Geometry Tracking Controller for Quadrotor %
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

		%tracking erros
		ex = uav_dynamics.x - xd;
		ev = uav_dynamics.v - vd;

		%calculate thrust for quadrotor
		e3 = [0; 0; 1];
		%calculate the thrust vector on inertial frame [e1; e2; e3]
		f_n(1) = -(-kx(1)*ex(1) - kv(1)*ev(1) - uav_dynamics.mass*uav_dynamics.g*e3(1) + uav_dynamics.g*x_dot_dot_d(1));
		f_n(2) = -(-kx(2)*ex(2) - kv(2)*ev(2) - uav_dynamics.mass*uav_dynamics.g*e3(2) + uav_dynamics.g*x_dot_dot_d(2));
		f_n(3) = -(-kx(3)*ex(3) - kv(3)*ev(3) - uav_dynamics.mass*uav_dynamics.g*e3(3) + uav_dynamics.g*x_dot_dot_d(3));
		f = dot(f_n, uav_dynamics.R*e3); %quadrotor thrust on body fram b3 axis

		%calculate desired dcm
		b1d = [cos(yaw_d); sin(yaw_d); 0];
		b3d = [0; 0; 0];
		b3d(1) = f_n(1) / norm(f_n);
		b3d(2) = f_n(2) / norm(f_n);
		b3d(3) = f_n(3) / norm(f_n);
		b2d = cross(b3d, b1d);
		b1d_proj = cross(b2d, b3d);
		Rd = [b1d_proj b2d b3d];
		%disp(Rd);
		%disp(det(Rd))
		
		%attitude manual control input
		desired_roll = deg2rad(30);
		desired_pitch = deg2rad(10);
		desired_yaw = deg2rad(35);
		Rd = math.euler_to_dcm(desired_roll, desired_pitch, desired_yaw);

		Rt = uav_dynamics.R';

		%attitude errors
		eR = 0.5 * math.vee_map_3x3((Rd'*uav_dynamics.R - Rt*Rd));
		eW = uav_dynamics.W - Rt*Rd*Wd;

		WJW = cross(uav_dynamics.W, uav_dynamics.J * uav_dynamics.W);
		M_feedfoward = WJW - J*(math.hat_map_3x3(uav_dynamics.W)*Rt*Rd*Wd - Rt*Rd*W_dot_d);
		uav_dynamics.M(1) = -kR(1)*eR(1) - kW(1)*eW(1) + M_feedfoward(1);
		uav_dynamics.M(2) = -kR(2)*eR(2) - kW(2)*eW(2) + M_feedfoward(2);
		uav_dynamics.M(3) = -kR(3)*eR(3) - kW(3)*eW(3) + M_feedfoward(3);

		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		% Record datas for plotting %
		%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
		time_arr(i) = i * uav_dynamics.dt;
		time_arr(i) = i * uav_dynamics.dt;
		eR_arr(:, i) = rad2deg(eR);
		eW_arr(:, i) = rad2deg(eW);
		accel_arr(:, i) = uav_dynamics.a;
		vel_arr.g(:, i) = uav_dynamics.v;
		pos_arr(:, i) = uav_dynamics.x;
		W_dot_arr(:, i) = rad2deg(uav_dynamics.W_dot);
		W_arr(:, i) = rad2deg(uav_dynamics.W);
		M_arr(:, i) = uav_dynamics.M;
		ex_arr(:, i) = ex;
		ev_arr(:, i) = ev;
	end

	%%%%%%%%%%%%%%%%%%%%%%%%%%
	%          Plot          %
	%%%%%%%%%%%%%%%%%%%%%%%%%%

	%1.attitude error  
	figure(1);
	title('eR');
	subplot (3, 1, 1);
	plot(time_arr, eR_arr(1, :));
	title('eR');
	xlabel('time [s]');
	ylabel('x [deg]');
	subplot (3, 1, 2);
	plot(time_arr, eR_arr(2, :));
	xlabel('time [s]');
	ylabel('y [deg]');
	subplot (3, 1, 3);
	plot(time_arr, eR_arr(3, :));
	xlabel('time [s]');
	ylabel('z [deg]');

	%2. attitude rate error
	figure(2);
	subplot (3, 1, 1);
	plot(time_arr, eW_arr(1, :));
	title('eW');
	xlabel('time [s]');
	ylabel('x [deg/s]');
	subplot (3, 1, 2);
	plot(time_arr, eW_arr(2, :));
	xlabel('time [s]');
	ylabel('y [deg/s]');
	subplot (3, 1, 3);
	plot(time_arr, eW_arr(3, :));
	xlabel('time [s]');
	ylabel('z [deg/s]');

	%3. position
	figure(3);
	subplot (3, 1, 1);
	plot(time_arr, pos_arr(1, :));
	title('position (NED frame)');
	xlabel('time [s]');
	ylabel('x [m]');
	subplot (3, 1, 2);
	plot(time_arr, pos_arr(2, :));
	xlabel('time [s]');
	ylabel('y [m]');
	subplot (3, 1, 3);
	plot(time_arr, -pos_arr(3, :));
	xlabel('time [s]');
	ylabel('-z [m]');

	%4. velocity
	figure(4);
	subplot (3, 1, 1);
	plot(time_arr, vel_arr.g(1, :));
	title('velocity (NED frame)');
	xlabel('time [s]');
	ylabel('x [m/s]');
	subplot (3, 1, 2);
	plot(time_arr, vel_arr.g(2, :));
	xlabel('time [s]');
	ylabel('y [m/s]');
	subplot (3, 1, 3);
	plot(time_arr, -vel_arr.g(3, :));
	xlabel('time [s]');
	ylabel('-z [m/s]');

	%5. acceleration
	figure(5);
	subplot (3, 1, 1);
	plot(time_arr, accel_arr(1, :));
	title('acceleration (NED frame)');
	xlabel('time [s]');
	ylabel('x [m/s^2]');
	subplot (3, 1, 2);
	plot(time_arr, accel_arr(2, :));
	xlabel('time [s]');
	ylabel('y [m/s^2]');
	subplot (3, 1, 3);
	plot(time_arr, -accel_arr(3, :));
	xlabel('time [s]');
	ylabel('-z [m/s^2]');

	%6. position error
	figure(6);
	subplot (3, 1, 1);
	plot(time_arr, ex_arr(1, :));
	title('position error');
	xlabel('time [s]');
	ylabel('x [m]');
	subplot (3, 1, 2);
	plot(time_arr, ex_arr(2, :));
	xlabel('time [s]');
	ylabel('y [m]');
	subplot (3, 1, 3);
	plot(time_arr, ex_arr(3, :));
	xlabel('time [s]');
	ylabel('z [m]');

	%7. velocity error
	figure(7);
	subplot (3, 1, 1);
	plot(time_arr, ev_arr(1, :));
	title('velocity error');
	xlabel('time [s]');
	ylabel('x [m/s]');
	subplot (3, 1, 2);
	plot(time_arr, ev_arr(2, :));
	xlabel('time [s]');
	ylabel('y [m/s]');
	subplot (3, 1, 3);
	plot(time_arr, ev_arr(3, :));
	xlabel('time [s]');
	ylabel('z [m/s]');

	disp("press any button to leave");
	pause;
end
